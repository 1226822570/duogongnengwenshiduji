<?xml version="1.0" encoding="UTF-8"?>
<package xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd" schemaVersion="1.4">
  <name>EVK-MIMXRT685_BSP</name>
  <vendor>NXP</vendor>
  <description>Board Support Pack for EVKMIMXRT685</description>
  <url>http://mcuxpresso.nxp.com/cmsis_pack/repo/</url>
  <license>Licenses.txt</license>
  <releases>
    <release version="12.0.0" date="2020-02-27">NXP CMSIS Packs based on MCUXpresso SDK 2.7.0</release>
  </releases>
  <keywords>
    <keyword>Board Support Pack</keyword>
  </keywords>
  <requirements>
    <packages>
      <package name="MIMXRT685S_DFP" vendor="NXP"/>
    </packages>
    <languages>
      <language name="C" version="99"/>
    </languages>
  </requirements>
  <boards>
    <board vendor="NXP" name="EVK-MIMXRT685">
      <description>IMXRTRT685-EVKE: EVK Development Platform for i.MX MIMXRT685S MCUs</description>
      <mountedDevice Dname="MIMXRT685S" Dvendor="NXP:11"/>
    </board>
  </boards>
  <conditions>
    <condition id="device.MIMXRT685S_AND_component.serial_manager_AND_component.usart_adapter_AND_device.MIMXRT685S_startup_AND_driver.cache_cache64_AND_driver.clock_AND_driver.common_AND_driver.flash_config_AND_driver.flexcomm_usart_AND_driver.flexspi_AND_driver.lpc_gpio_AND_driver.lpc_iopctl_AND_driver.power_AND_driver.reset_AND_utility.debug_console">
      <accept Dname="MIMXRT685S" Dvariant="MIMXRT685SFVKB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685SFVKB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685S" Dvariant="MIMXRT685SFFOB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685SFFOB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685S" Dvariant="MIMXRT685SFAWBR" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685SFAWBR" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="usart_adapter"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="iopctl"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="gpio"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="reset"/>
      <require Cclass="Device" Cgroup="Startup" Csub="MIMXRT685S_startup"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flash_config"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="cache"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flexspi"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="clock"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="power"/>
    </condition>
    <condition id="device.MIMXRT685S_AND_driver.common">
      <accept Dname="MIMXRT685S" Dvariant="MIMXRT685SFVKB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685SFVKB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685S" Dvariant="MIMXRT685SFFOB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685SFFOB" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685S" Dvariant="MIMXRT685SFAWBR" Dvendor="NXP:11"/>
      <accept Dname="MIMXRT685SFAWBR" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
    </condition>
  </conditions>
  <examples>
    <example name="acmp_interrupt" folder="driver_examples/acmp/interrupt" doc="readme.txt">
      <description>The ACMP interrupt project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and print information corresponding to different comparison result in terminal. The purpose of this demo is to show how to use the ACMP driver in SDK software by interrupt way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/acmp_interrupt.uvprojx"/>
        <environment name="iar" load="iar/acmp_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="acmp_polling" folder="driver_examples/acmp/polling" doc="readme.txt">
      <description>The ACMP Polling project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and print information corresponding to different comparison result in terminal. The purpose of this demo is to show how to use the ACMP driver in SDK software by polling way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/acmp_polling.uvprojx"/>
        <environment name="iar" load="iar/acmp_polling.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="acmp_round_robin" folder="driver_examples/acmp/round_robin" doc="readme.txt">
      <description>The ACMP Round-Robin project is a simple demonstration program that uses the SDK software. User must set the round-robin mode trigger in specific board properly according to the board resource before running the example. When the example running, it sets positive port as fixed channel and internal DAC output as comparison reference in positive port and sets the channels input by useras round-robin checker channel. The example will enter stop mode and wait user to change the voltage of round-robin checker channel. It will exit stop mode after the voltage of round-robin checkerchannel changed by user.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/acmp_round_robin.uvprojx"/>
        <environment name="iar" load="iar/acmp_round_robin.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="casper" folder="driver_examples/casper" doc="readme.txt">
      <description>The CASPER Example project is a demonstration program that uses the KSDK software to calculate RSA.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/casper.uvprojx"/>
        <environment name="iar" load="iar/casper.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_i2c_dma_b2b_transfer_master" folder="cmsis_driver_examples/i2c/dma_b2b_transfer/master" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_i2c_dma_b2b_transfer_slave" folder="cmsis_driver_examples/i2c/dma_b2b_transfer/slave" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_i2c_int_b2b_transfer_master" folder="cmsis_driver_examples/i2c/int_b2b_transfer/master" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_int_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_int_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_i2c_int_b2b_transfer_slave" folder="cmsis_driver_examples/i2c/int_b2b_transfer/slave" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_int_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_int_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_spi_dma_b2b_transfer_master" folder="cmsis_driver_examples/spi/dma_b2b_transfer/master" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_dma_b2b_transfer_master example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_spi_dma_b2b_transfer_slave" folder="cmsis_driver_examples/spi/dma_b2b_transfer/slave" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_dma_b2b_transfer_slave example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_spi_int_b2b_transfer_master" folder="cmsis_driver_examples/spi/int_b2b_transfer/master" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_interrupt_b2b_transfer_master example shows how to use CMSIS spi driver as master to do board to board transfer with interrupt:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_int_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_int_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_spi_int_b2b_transfer_slave" folder="cmsis_driver_examples/spi/int_b2b_transfer/slave" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_interrupt_b2b_transfer_slave example shows how to use CMSIS spi driver as master to do board to board transfer with interrupt:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_int_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_int_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_usart_dma_transfer" folder="cmsis_driver_examples/usart/dma_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_usart_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_usart_dma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_usart_interrupt_transfer" folder="cmsis_driver_examples/usart/interrupt_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_usart_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_usart_interrupt_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="crc" folder="driver_examples/crc" doc="readme.txt">
      <description>The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/crc.uvprojx"/>
        <environment name="iar" load="iar/crc.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ctimer_match_example" folder="driver_examples/ctimer/simple_match" doc="readme.txt">
      <description>The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ctimer_match_example.uvprojx"/>
        <environment name="iar" load="iar/ctimer_match_example.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ctimer_match_interrupt_example" folder="driver_examples/ctimer/simple_match_interrupt" doc="readme.txt">
      <description>The Simple Match Interrupt project is to demonstrate usage of the SDK CTimer driver with interrupt callback functionsIn this example the upon match and IO pin connected to the LED is toggled and the timer is reset, so it would generate a square wave.With an interrupt callback the match value is changed frequently in such a way that the frequency of the output square wave is increased gradually.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ctimer_match_interrupt_example.uvprojx"/>
        <environment name="iar" load="iar/ctimer_match_interrupt_example.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ctimer_pwm_example" folder="driver_examples/ctimer/simple_pwm" doc="readme.txt">
      <description>The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ctimer_pwm_example.uvprojx"/>
        <environment name="iar" load="iar/ctimer_pwm_example.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ctimer_pwm_interrupt_example" folder="driver_examples/ctimer/simple_pwm_interrupt" doc="readme.txt">
      <description>The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ctimer_pwm_interrupt_example.uvprojx"/>
        <environment name="iar" load="iar/ctimer_pwm_interrupt_example.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dma_channel_chain" folder="driver_examples/dma/channel_chain" doc="readme.txt">
      <description>The DMA channel chain example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the DMA channel chain feature.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dma_channel_chain.uvprojx"/>
        <environment name="iar" load="iar/dma_channel_chain.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dma_interleave_transfer" folder="driver_examples/dma/interleave_transfer" doc="readme.txt">
      <description>The DMA interleave transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA interleave feature.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dma_interleave_transfer.uvprojx"/>
        <environment name="iar" load="iar/dma_interleave_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dma_linked_transfer" folder="driver_examples/dma/linked_transfer" doc="readme.txt">
      <description>The DMA linked transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a linked trnasfer example.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dma_linked_transfer.uvprojx"/>
        <environment name="iar" load="iar/dma_linked_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dma_memory_to_memory" folder="driver_examples/dma/memory_to_memory" doc="readme.txt">
      <description>The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dma_memory_to_memory.uvprojx"/>
        <environment name="iar" load="iar/dma_memory_to_memory.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dmic_dma" folder="driver_examples/dmic/dmic_dma" doc="readme.txt">
      <description>This example shows how to use DMA to transfer data from DMIC to memory.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dmic_dma.uvprojx"/>
        <environment name="iar" load="iar/dmic_dma.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dmic_hwvad" folder="driver_examples/dmic/dmic_hwvad" doc="readme.txt">
      <description>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~This demo explains how built in HWVAD( HW voice activity detector) in LPC5411x can be used towake up the device from sleep mode</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dmic_hwvad.uvprojx"/>
        <environment name="iar" load="iar/dmic_hwvad.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dmic_i2s_dma" folder="driver_examples/dmic/dmic_i2s_dma" doc="readme.txt">
      <description>Demonstrates the DMIC working with I2S. Audio is converted to samples in the DMIC module.Then, the data is placed memory buffer. Last, it is send data to the I2S buffer and send to the CODEC, then the audio data will be output to Lineout of CODEC.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dmic_i2s_dma.uvprojx"/>
        <environment name="iar" load="iar/dmic_i2s_dma.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dmic_multi_channel" folder="driver_examples/dmic/dmic_multi_channel" doc="readme.txt">
      <description>Demonstrates the DMIC multi channel working with I2S. Audio is converted to samples in the DMIC module.Then, the data is placed memory buffer. Last, it is send data to the I2S buffer and send to the CODEC, then the audio data will be output to Lineout of CODEC.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dmic_multi_channel.uvprojx"/>
        <environment name="iar" load="iar/dmic_multi_channel.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dsp_audio_demo_bm_cm33" folder="dsp_examples/audio_demo_bm/cm33" doc="readme.txt">
      <description>The dsp_audio_demo_bm demo application demonstrates starting DSP core with DSP image.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dsp_audio_demo_bm_cm33.uvprojx"/>
        <environment name="iar" load="iar/dsp_audio_demo_bm_cm33.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dsp_hello_world_usart_cm33" folder="dsp_examples/hello_world_usart/cm33" doc="readme.txt">
      <description>The dsp_hello_world_usart demo application demonstrates starting DSP core with DSP image.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dsp_hello_world_usart_cm33.uvprojx"/>
        <environment name="iar" load="iar/dsp_hello_world_usart_cm33.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dsp_mu_interrupt_cm33" folder="dsp_examples/mu_interrupt/cm33" doc="readme.txt">
      <description>The dsp_mu_interrupt demo application demonstrates starting DSP core with DSP image.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dsp_mu_interrupt_cm33.uvprojx"/>
        <environment name="iar" load="iar/dsp_mu_interrupt_cm33.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dsp_mu_polling_cm33" folder="dsp_examples/mu_polling/cm33" doc="readme.txt">
      <description>The dsp_mu_polling demo application demonstrates starting DSP core with DSP image.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dsp_mu_polling_cm33.uvprojx"/>
        <environment name="iar" load="iar/dsp_mu_polling_cm33.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dsp_naturedsp_cm33" folder="dsp_examples/naturedsp/cm33" doc="readme.txt">
      <description>The dsp_naturedsp demo application demonstrates starting DSP core with DSP image which contains NatureDSP functions calls.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dsp_naturedsp_cm33.uvprojx"/>
        <environment name="iar" load="iar/dsp_naturedsp_cm33.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dsp_sema42_cm33" folder="dsp_examples/sema42/cm33" doc="readme.txt">
      <description>The dsp_sema42 demo application demonstrates starting DSP core with DSP image.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dsp_sema42_cm33.uvprojx"/>
        <environment name="iar" load="iar/dsp_sema42_cm33.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexspi_octal_dma_transfer" folder="driver_examples/flexspi/octal/dma_transfer" doc="readme.txt">
      <description>The flexspi_octal_dma_transfer example shows how to use flexspi driver with dma:In this example, flexspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexspi_octal_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/flexspi_octal_dma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexspi_octal_polling_transfer" folder="driver_examples/flexspi/octal/polling_transfer" doc="readme.txt">
      <description>The flexspi_octal_polling_transfer example shows how to use flexspi driver with polling:In this example, flexspi will send data and operate the external octal flash connected with FLEXSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and program a page into the flash, at last check if the data in flash is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexspi_octal_polling_transfer.uvprojx"/>
        <environment name="iar" load="iar/flexspi_octal_polling_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexspi_psram_dma_transfer" folder="driver_examples/flexspi/psram/dma_transfer" doc="readme.txt">
      <description>The flexspi_psram_dma_transfer example shows how to use flexspi driver with dma: In this example, flexspi will send data and operate the external PSRAM connected with FLEXSPI. Some simple flash command will be executed, such as Read Data and Write Data.Example will write/read through the whole chip, through IP command and AHB command.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexspi_psram_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/flexspi_psram_dma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexspi_psram_polling_transfer" folder="driver_examples/flexspi/psram/polling_transfer" doc="readme.txt">
      <description>The flexspi_psram_polling_transfer example shows how to use flexspi driver with polling: In this example, flexspi will send data and operate the external PSRAM connected with FLEXSPI. Some simple flash command will be executed, such as Read Data and Write Data.Example will write/read through the whole chip, through IP command and AHB command.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexspi_psram_polling_transfer.uvprojx"/>
        <environment name="iar" load="iar/flexspi_psram_polling_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="fmeas" folder="driver_examples/fmeas" doc="readme.txt">
      <description>This example shows how to use SDK drivers to use the Frequency Measure feature of SYSCON module on LPC devices.It shows how to measure a target frequency using a (faster) reference frequency. The example uses the internal main clock as the reference frequency to measure the frequencies of the RTC, watchdog oscillator, and internal RC oscillator.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/fmeas.uvprojx"/>
        <environment name="iar" load="iar/fmeas.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_input_interrupt" folder="driver_examples/gpio/input_interrupt" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear registers for each GPIO pin output register. </description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_input_interrupt.uvprojx"/>
        <environment name="iar" load="iar/gpio_input_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_led_output" folder="driver_examples/gpio/led_output" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs. The example use LEDs and buttons to demonstrates GPIO API for port and pin manipulation (init, set,clear, and toggle).</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_led_output.uvprojx"/>
        <environment name="iar" load="iar/gpio_led_output.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="hashcrypt" folder="driver_examples/hashcrypt" doc="readme.txt">
      <description>The hashcrypt Example project is a demonstration program that uses the KSDK software to encrypt and hash data with hardware acceleration.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/hashcrypt.uvprojx"/>
        <environment name="iar" load="iar/hashcrypt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="hello_world" folder="demo_apps/hello_world" doc="readme.txt">
      <description>The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the "Hello World" string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/hello_world.uvprojx"/>
        <environment name="iar" load="iar/hello_world.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="hello_world_ns" folder="trustzone_examples/hello_world/hello_world_ns" doc="readme.txt">
      <description>The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. This demo application also utilizes TrustZone, so it demonstrates basic techniques for TrustZone applications development. This is non-secure part of the application.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/hello_world_ns.uvprojx"/>
        <environment name="iar" load="iar/hello_world_ns.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="hello_world_s" folder="trustzone_examples/hello_world/hello_world_s" doc="readme.txt">
      <description>The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. This demo application also utilizes TrustZone, so it demonstrates basic techniques for TrustZone applications development. This is secure part of the application.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/hello_world_s.uvprojx"/>
        <environment name="iar" load="iar/hello_world_s.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_accel_event_trigger" folder="driver_examples/i2c/accel_event_trigger" doc="readme.txt">
      <description>This example demonstrate how to wake up main device in low power mode with accelerometer trigger event. The accelerometer can keep working while the main device is in low power mode (or deep sleep mode). Only when the configured event was captured, the accelerometer will trigger the interrupt to wake up the main device. This example uses I2C to configure the accelerometer to work in 800Hz data rate with low noise mode. And when the tap event is triggered, it will wake up the main device. And 32 samples around the trigger event will be captured.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_accel_event_trigger.uvprojx"/>
        <environment name="iar" load="iar/i2c_accel_event_trigger.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_dma_b2b_transfer_master" folder="driver_examples/i2c/dma_b2b_transfer/master" doc="readme.txt">
      <description>The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_dma_b2b_transfer_slave" folder="driver_examples/i2c/dma_b2b_transfer/slave" doc="readme.txt">
      <description>The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_interrupt_b2b_transfer_master" folder="driver_examples/i2c/interrupt_b2b_transfer/master" doc="readme.txt">
      <description>The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_interrupt_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_interrupt_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_interrupt_b2b_transfer_slave" folder="driver_examples/i2c/interrupt_b2b_transfer/slave" doc="readme.txt">
      <description>The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_interrupt_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_interrupt_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_polling_b2b_master" folder="driver_examples/i2c/polling_b2b/master" doc="readme.txt">
      <description>The i2c_polling_b2b_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_polling_b2b_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_polling_b2b_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_polling_b2b_slave" folder="driver_examples/i2c/polling_b2b/slave" doc="readme.txt">
      <description>The i2c_polling_b2b_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_polling_b2b_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_polling_b2b_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_read_accel_value_transfer" folder="driver_examples/i2c/read_accel_value_transfer" doc="readme.txt">
      <description>The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_read_accel_value_transfer.uvprojx"/>
        <environment name="iar" load="iar/i2c_read_accel_value_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2s_dma_record_playback" folder="driver_examples/i2s/dma_record_playback" doc="readme.txt">
      <description>The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2s_dma_record_playback.uvprojx"/>
        <environment name="iar" load="iar/i2s_dma_record_playback.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2s_dma_transfer" folder="driver_examples/i2s/dma_transfer" doc="readme.txt">
      <description>The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2s_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/i2s_dma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2s_dma_transfer_tfa9xxx" folder="driver_examples/i2s/dma_transfer_tfa9xxx" doc="readme.txt">
      <description>The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with TFA9XXX ampfilier (including TFA9892N1, TFA9894N1 and TFA9894N2). Jumpers need to set so that TFA amplifier(s) can have I2S input.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2s_dma_transfer_tfa9xxx.uvprojx"/>
        <environment name="iar" load="iar/i2s_dma_transfer_tfa9xxx.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2s_interrupt_record_playback" folder="driver_examples/i2s/interrupt_record_playback" doc="readme.txt">
      <description>The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2s_interrupt_record_playback.uvprojx"/>
        <environment name="iar" load="iar/i2s_interrupt_record_playback.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2s_interrupt_transfer" folder="driver_examples/i2s/interrupt_transfer" doc="readme.txt">
      <description>The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2s_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/i2s_interrupt_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i3c_polling_b2b_transfer_master" folder="driver_examples/i3c/polling_b2b_transfer/master" doc="readme.txt">
      <description>The i3c_polling_b2b_transfer_master example shows how to use i3c driver as master to do board to board transfer using polling method:In this example, one i3c instance as master and another i3c instance on the other board as slave. Master will assign dynamic address to slave, then sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i3c_polling_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i3c_polling_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i3c_polling_b2b_transfer_slave" folder="driver_examples/i3c/polling_b2b_transfer/slave" doc="readme.txt">
      <description>The i3c_polling_b2b_transfer_slave example shows how to use i3c driver as slave to do board to board transfer with a polling master:In this example, one i3c instance as slave and another i3c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i3c_polling_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i3c_polling_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="iap_flash" folder="driver_examples/iap/iap_flash" doc="readme.txt">
      <description>The IAP flash project is a simple demonstration program of the SDK IAP driver. It provides some flash operations with ROM API, such as automatically detect flash configuration, erase sectors and program pages. All operations are followed by flash memory check to ensure the data operated are successful.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/iap_flash.uvprojx"/>
        <environment name="iar" load="iar/iap_flash.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="iap_otp" folder="driver_examples/iap/iap_otp" doc="readme.txt">
      <description>The IAP project is a simple demonstration program of the SDK IAP driver. It reads fuse word with input index. A message a printed on the UART terminal as fuse read iap operations are performed.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/iap_otp.uvprojx"/>
        <environment name="iar" load="iar/iap_otp.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_dma" folder="driver_examples/lpadc/dma" doc="readme.txt">
      <description>The lpdc_dma example shows how to use ADC to trigger a DMA transfer. In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC's sample input. When running the project, typing any key into debug console would trigger the conversion, the software trigger API is called to start the conversion. When the ADC conversion is completed, it would trigger the DMA in ping-pong transfer mode to move the ADC conversion result from ADC conversion data register to user indicated memory. Then the main loop waits for the transfer to be done and print the result to terminal.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_dma.uvprojx"/>
        <environment name="iar" load="iar/lpadc_dma.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_interrupt" folder="driver_examples/lpadc/interrupt" doc="readme.txt">
      <description>The lpdc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_interrupt.uvprojx"/>
        <environment name="iar" load="iar/lpadc_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_polling" folder="driver_examples/lpadc/polling" doc="readme.txt">
      <description>The lpadc_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_polling.uvprojx"/>
        <environment name="iar" load="iar/lpadc_polling.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_single_interrupt" folder="driver_examples/lpadc/single_interrupt" doc="readme.txt">
      <description>The lpdc_single_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_single_interrupt.uvprojx"/>
        <environment name="iar" load="iar/lpadc_single_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lpadc_single_polling" folder="driver_examples/lpadc/single_polling" doc="readme.txt">
      <description>The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lpadc_single_polling.uvprojx"/>
        <environment name="iar" load="iar/lpadc_single_polling.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mpi_loader_dsp_hello_world" folder="component_examples/mpi_loader/dsp_hello_world" doc="readme.txt">
      <description>The mpi_loader_dsp_hello_world demo application demonstrates multicore packed image loader to load DSP image to execution place and kick off it. The multicore packed image is created by elftosb tool.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mpi_loader_dsp_hello_world.uvprojx"/>
        <environment name="iar" load="iar/mpi_loader_dsp_hello_world.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mpi_loader_extram_hello_world" folder="component_examples/mpi_loader/extram_hello_world" doc="readme.txt">
      <description>The mpi_loader_extram_hello_world example demonstrates an application running in external RAM, and being loaded by mpi_loader_extram_loader. The application binary need to be built together with the mpi_loader_extram_loader binary with elftosb tool.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mpi_loader_extram_hello_world.uvprojx"/>
        <environment name="iar" load="iar/mpi_loader_extram_hello_world.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mpi_loader_extram_loader" folder="component_examples/mpi_loader/extram_loader" doc="readme.txt">
      <description>The mpi_loader_extram_loader demo application demonstrates multicore packed image loader to initialize external RAM first and then load the external RAM image to execute. The multicore packed image is created by elftosb tool.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mpi_loader_extram_loader.uvprojx"/>
        <environment name="iar" load="iar/mpi_loader_extram_loader.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mrt_example" folder="driver_examples/mrt" doc="readme.txt">
      <description>The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mrt_example.uvprojx"/>
        <environment name="iar" load="iar/mrt_example.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ostimer_example" folder="driver_examples/ostimer" doc="readme.txt">
      <description>The OSTIMER project is a simple demonstration program of the SDK OSTIMER driver. It sets the OSTIMER as the wakeup source from deep-sleep mode. After wakeup from deep-sleep mode, OS timer will set match value to trigger the interrupt while the timer count tick reach the match value about every 2 seconds.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ostimer_example.uvprojx"/>
        <environment name="iar" load="iar/ostimer_example.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pca9420" folder="driver_examples/pca9420" doc="readme.txt">
      <description>The pca9420 driver example demonstrates the usage of pca9420 SDK component driver.The example shows the usage of PCA9420 API to dump mode group settings; Or switch mode group; Or dump PCA9420 register content;</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pca9420.uvprojx"/>
        <environment name="iar" load="iar/pca9420.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pint_pattern_match" folder="driver_examples/pint/pattern_match" doc="readme.txt">
      <description>This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pint_pattern_match.uvprojx"/>
        <environment name="iar" load="iar/pint_pattern_match.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pint_pin_interrupt" folder="driver_examples/pint/pin_interrupt" doc="readme.txt">
      <description>This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pint_pin_interrupt.uvprojx"/>
        <environment name="iar" load="iar/pint_pin_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="power_manager" folder="demo_apps/power_manager" doc="readme.txt">
      <description>The power_manager application shows the usage of normal power mode control APIs for entering the four kinds of low power mode: Sleep mode, Deep Sleep mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up byprepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions. 1. Configure all pins as GPIO with pull-up resistor disabled in the IOCON block. 2. Configure GPIO pins as outputs using the GPIO DIR register. 3. Write 1 to the GPIO CLR register to drive the outputs LOW. 4. All peripherals disabled.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/power_manager.uvprojx"/>
        <environment name="iar" load="iar/power_manager.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_fft" folder="driver_examples/powerquad/benchmark_fft" doc="readme.txt">
      <description>This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_fft to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_fft.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_fft.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_filter" folder="driver_examples/powerquad/benchmark_filter" doc="readme.txt">
      <description>This example shows the PowerQuad based CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_sw_filter to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_filter.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_filter.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_math" folder="driver_examples/powerquad/benchmark_math" doc="readme.txt">
      <description>This example shows the PowerQuad based CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_sw_math to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_math.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_math.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_matrix" folder="driver_examples/powerquad/benchmark_matrix" doc="readme.txt">
      <description>This example shows the PowerQuad based CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_sw_matrix to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_matrix.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_matrix.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_sw_fft" folder="driver_examples/powerquad/benchmark_sw_fft" doc="readme.txt">
      <description>This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_fft to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_sw_fft.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_sw_fft.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_sw_filter" folder="driver_examples/powerquad/benchmark_sw_filter" doc="readme.txt">
      <description>This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_filter to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_sw_filter.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_sw_filter.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_sw_math" folder="driver_examples/powerquad/benchmark_sw_math" doc="readme.txt">
      <description>This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_math to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_sw_math.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_sw_math.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_sw_matrix" folder="driver_examples/powerquad/benchmark_sw_matrix" doc="readme.txt">
      <description>This example shows the official CMSIS DSP function performance. It could be compared with the project powerquad_benckmark_matrix to show the PowerQuad performance improvement.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_sw_matrix.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_sw_matrix.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_benchmark_vector" folder="driver_examples/powerquad/benchmark_vector" doc="readme.txt">
      <description>This example shows the PowerQuad based CMSIS DSP function performance.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_benchmark_vector.uvprojx"/>
        <environment name="iar" load="iar/powerquad_benchmark_vector.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_cmsis" folder="driver_examples/powerquad/cmsis" doc="readme.txt">
      <description>This example shows how to use powerquad driver CMSIS DSP compatible functions.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_cmsis.uvprojx"/>
        <environment name="iar" load="iar/powerquad_cmsis.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_filter" folder="driver_examples/powerquad/filter" doc="readme.txt">
      <description>This example shows how to use powerquad driver filter functions.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_filter.uvprojx"/>
        <environment name="iar" load="iar/powerquad_filter.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_fir_fast" folder="driver_examples/powerquad/fir_fast" doc="readme.txt">
      <description>The PowerQuad fetches data from system RAM and private RAM through different path, for the calcutations which need data from two parts of memory, such as FIR, convolve, correlate, and some matrix operations, place the input data B in private RAM improves the performance. PowerQuad private RAM starts from address 0xe0000000, the first 4KByte is used by PowerQuad driver, the RAM starts from 0xe0001000 could be used by user for optimization. In this example, the FIR taps, convolve input data B, and correlate input data B are not changed, so they are converted to float format and saved to private RAM at the beginning. If the example runs successfully, the performance using optimized method is better than the nornal method.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_fir_fast.uvprojx"/>
        <environment name="iar" load="iar/powerquad_fir_fast.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_math" folder="driver_examples/powerquad/math" doc="readme.txt">
      <description>This example project shows how to use the powerquad driver math functions.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_math.uvprojx"/>
        <environment name="iar" load="iar/powerquad_math.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_matrix" folder="driver_examples/powerquad/matrix" doc="readme.txt">
      <description>This example shows how to use powerquad driver matrix functions.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_matrix.uvprojx"/>
        <environment name="iar" load="iar/powerquad_matrix.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="powerquad_transform" folder="driver_examples/powerquad/transform" doc="readme.txt">
      <description>This example shows how to use powerquad driver transform functions.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/powerquad_transform.uvprojx"/>
        <environment name="iar" load="iar/powerquad_transform.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="puf" folder="driver_examples/puf" doc="readme.txt">
      <description>This driver example project demonstrates how to use driver for the PUF controller which provides a secure key storage.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/puf.uvprojx"/>
        <environment name="iar" load="iar/puf.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="rtc_example" folder="driver_examples/rtc" doc="readme.txt">
      <description>The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/rtc_example.uvprojx"/>
        <environment name="iar" load="iar/rtc_example.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="sctimer_16bit_counter" folder="driver_examples/sctimer/16bit_counter" doc="readme.txt">
      <description>The SCTimer 16-bit counter project is a demonstration program of the SDK SCTimer driver operation when using the SCTimer counteras two 16-bit counters.The example toggles an output per counter when a match occurs.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/sctimer_16bit_counter.uvprojx"/>
        <environment name="iar" load="iar/sctimer_16bit_counter.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="sctimer_multi_state_pwm" folder="driver_examples/sctimer/multi_state_pwm" doc="readme.txt">
      <description>The SCTImer multi-state project is a demonstration program of the SCTimer state machine. It shows how to set up events to be triggered in a certain stateand transitioning between states.State 0 has 2 events that generate a PWM signal, it also has an event linked to an input signal to transition to State 1.State 1 has 4 events that generate 2 PWM signals, it also has an event linked to an input signal to transition to State 0.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/sctimer_multi_state_pwm.uvprojx"/>
        <environment name="iar" load="iar/sctimer_multi_state_pwm.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="sctimer_pwm_with_dutycyle_change" folder="driver_examples/sctimer/pwm_with_dutycyle_change" doc="readme.txt">
      <description>This SCTIMer project is a demonstration program of the SDK SCTimer driver's PWM generation. It sets up a PWM signaland periodically updates the PWM signals dutycycle.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/sctimer_pwm_with_dutycyle_change.uvprojx"/>
        <environment name="iar" load="iar/sctimer_pwm_with_dutycyle_change.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="sctimer_simple_pwm" folder="driver_examples/sctimer/simple_pwm" doc="readme.txt">
      <description>The SCTimer project is a simple demonstration program of the SDK SCTimer's driver capabiltiy to generate PWM signals.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/sctimer_simple_pwm.uvprojx"/>
        <environment name="iar" load="iar/sctimer_simple_pwm.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="secure_faults_ns" folder="trustzone_examples/secure_faults/secure_faults_ns" doc="readme.txt">
      <description>The Secure Faults demo application demonstrates handling of different secure faults. This application is based on application Hello World. In addition, user can invoke different secure faults by setting testCaseNumber variable (see source code). This is non-secure part of the application.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/secure_faults_ns.uvprojx"/>
        <environment name="iar" load="iar/secure_faults_ns.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="secure_faults_s" folder="trustzone_examples/secure_faults/secure_faults_s" doc="readme.txt">
      <description>The Secure Faults demo application demonstrates handling of different secure faults. This application is based on application Hello World. In addition, user can invoke different secure faults by setting testCaseNumber variable (see source code). This is secure part of the application.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/secure_faults_s.uvprojx"/>
        <environment name="iar" load="iar/secure_faults_s.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="secure_gpio_ns" folder="trustzone_examples/secure_gpio/secure_gpio_ns" doc="readme.txt">
      <description>The Secure GPIO demo application demonstrates using of secure GPIO peripheral and GPIO mask feature in AHB secure controller. This is non-secure part of the application.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/secure_gpio_ns.uvprojx"/>
        <environment name="iar" load="iar/secure_gpio_ns.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="secure_gpio_s" folder="trustzone_examples/secure_gpio/secure_gpio_s" doc="readme.txt">
      <description>The Secure GPIO demo application demonstrates using of secure GPIO peripheral and GPIO mask feature in AHB secure controller. This is secure part of the application.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/secure_gpio_s.uvprojx"/>
        <environment name="iar" load="iar/secure_gpio_s.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="shell" folder="demo_apps/shell" doc="readme.txt">
      <description>The Shell Demo application demonstrates to control Leds by commands.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/shell.uvprojx"/>
        <environment name="iar" load="iar/shell.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_dma_b2b_transfer_master" folder="driver_examples/spi/dma_b2b_transfer/master" doc="readme.txt">
      <description>The spi_dma_b2b_transfer_master example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from slave is correct. This example needs to work with spi_dma_b2b_transfer_slave example.Note: This example will run in master mode, please prepare another board for slave, and the slave       board should be started first.Project Information1.How to set the baudrate of SPI?  The baudrate of SPI is easy to set, just make sure the source clock of SPI.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/spi_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_dma_b2b_transfer_slave" folder="driver_examples/spi/dma_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_dma_b2b_transfer_slave example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from master is correct. This example needs to work with spi_dma_b2b_transfer_master example.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_interrupt_b2b_master" folder="driver_examples/spi/interrupt_b2b/master" doc="readme.txt">
      <description>The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_master.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_interrupt_b2b_slave" folder="driver_examples/spi/interrupt_b2b/slave" doc="readme.txt">
      <description>The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_interrupt_b2b_transfer_master" folder="driver_examples/spi/interrupt_b2b_transfer/master" doc="readme.txt">
      <description>The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_interrupt_b2b_transfer_slave" folder="driver_examples/spi/interrupt_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_polling_b2b_transfer_master" folder="driver_examples/spi/polling_b2b_transfer/master" doc="readme.txt">
      <description>The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_polling_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/spi_polling_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="spi_polling_b2b_transfer_slave" folder="driver_examples/spi/polling_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/spi_polling_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_polling_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="trng_random" folder="driver_examples/trng/random" doc="readme.txt">
      <description>The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/trng_random.uvprojx"/>
        <environment name="iar" load="iar/trng_random.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="usart_dma_double_buffer_transfer" folder="driver_examples/usart/dma_double_buffer_transfer" doc="readme.txt">
      <description>This example shows how to use the DMA driver to implement a double buffer receive scheme from the USARTThe example shows the double buffer constructed using two descriptors (g_pingpong_desc). These descriptors are cycled from one to the other.Things to note- The descriptors of the ping pong transfer need to be aligned to size 16- The inital transfer will perform the same job as first descriptor of ping pong, so the first linkeage is to go to g_pingpong_desc[1]- g_pingpong_desc[1] then chains the g_pingpong_desc[0] as the next descriptor- The properties are set up such that g_pingpong_desc[0] (and the initial configuration uses INTA to signal back to the callback)- g_pingpong_desc[1] uses INTB to signal to the callback- The scheduled callback uses this information to know which data was last writtenA note on PerformanceThe intent of this example is to illustrate how a double-buffer scheme can be implemented using the dma. The performance of this example will be limited to how quickly the echo printer can read-out the data from the ping pong buffer and display it. This means that the example will work well if characters are entered at a rate where the DMA callback to echo the string can keep up with the input stream. Connecting the USARTRX to a continuous fast speed will cause the DMA to fall behind. </description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/usart_dma_double_buffer_transfer.uvprojx"/>
        <environment name="iar" load="iar/usart_dma_double_buffer_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="usart_dma_low_power" folder="driver_examples/usart/dma_low_power" doc="readme.txt">
      <description>The usart_dma_low_power example shows how to use usart to wake up the system in low power modes, and how to wake up for DMA only. In this example, one usart instance connects to PC through usart, the board will start receiving characters from PC and then go into low power mode. Each character from PC will only wake up the DMA but the CPU keeps in low power mode. Once 8 characters were received, system will be woken up and echo the characters to PC.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/usart_dma_low_power.uvprojx"/>
        <environment name="iar" load="iar/usart_dma_low_power.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="usart_dma_transfer" folder="driver_examples/usart/dma_transfer" doc="readme.txt">
      <description>The usart_dma example shows how to use usart driver with DMA:In this example, one usart instance connect to PC through usart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/usart_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/usart_dma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="usart_interrupt" folder="driver_examples/usart/interrupt" doc="readme.txt">
      <description>The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/usart_interrupt.uvprojx"/>
        <environment name="iar" load="iar/usart_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="usart_interrupt_rb_transfer" folder="driver_examples/usart/interrupt_rb_transfer" doc="readme.txt">
      <description>The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/usart_interrupt_rb_transfer.uvprojx"/>
        <environment name="iar" load="iar/usart_interrupt_rb_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="usart_interrupt_transfer" folder="driver_examples/usart/interrupt_transfer" doc="readme.txt">
      <description>The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/usart_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/usart_interrupt_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="usart_polling" folder="driver_examples/usart/polling" doc="readme.txt">
      <description>The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/usart_polling.uvprojx"/>
        <environment name="iar" load="iar/usart_polling.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="utick" folder="driver_examples/utick" doc="readme.txt">
      <description>The utick project is a simple demonstration program of the SDK utick driver. It sets up the utick hardware block to trigger a periodic interrupt after every 1 second. When the utick interrupt is triggered a message is printed on the UART terminal.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/utick.uvprojx"/>
        <environment name="iar" load="iar/utick.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="wwdt_example" folder="driver_examples/wwdt" doc="readme.txt">
      <description>The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated.</description>
      <board name="EVK-MIMXRT685" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/wwdt_example.uvprojx"/>
        <environment name="iar" load="iar/wwdt_example.ewp"/>
      </project>
      <attributes/>
    </example>
  </examples>
  <components>
    <component Cclass="Board Support" Cgroup="SDK Project Template" Csub="project_template" Cvariant="evkmimxrt685" Cversion="1.0.0" condition="device.MIMXRT685S_AND_component.serial_manager_AND_component.usart_adapter_AND_device.MIMXRT685S_startup_AND_driver.cache_cache64_AND_driver.clock_AND_driver.common_AND_driver.flash_config_AND_driver.flexcomm_usart_AND_driver.flexspi_AND_driver.lpc_gpio_AND_driver.lpc_iopctl_AND_driver.power_AND_driver.reset_AND_utility.debug_console">
      <description/>
      <RTE_Components_h>
#define FSL_SDK_DRIVER_QUICK_ACCESS_ENABLE 1
</RTE_Components_h>
      <files>
        <file category="sourceC" attr="config" name="project_template/board.c" version="1.0.0"/>
        <file category="header" attr="config" name="project_template/board.h" version="1.0.0"/>
        <file category="sourceC" attr="config" name="project_template/clock_config.c" version="1.0.0"/>
        <file category="header" attr="config" name="project_template/clock_config.h" version="1.0.0"/>
        <file category="sourceC" attr="config" name="project_template/peripherals.c" version="1.0.0"/>
        <file category="header" attr="config" name="project_template/peripherals.h" version="1.0.0"/>
        <file category="sourceC" attr="config" name="project_template/pin_mux.c" version="1.0.0"/>
        <file category="header" attr="config" name="project_template/pin_mux.h" version="1.0.0"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager_usb_config" Cversion="1.0.0">
      <description/>
      <files>
        <file category="header" name="component_examples/config/usb_device_config.h"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="SDK Drivers" Csub="flash_config" Cversion="2.0.0" condition="device.MIMXRT685S_AND_driver.common">
      <description>flash config block</description>
      <RTE_Components_h>
#define BOOT_HEADER_ENABLE 1
</RTE_Components_h>
      <files>
        <file category="sourceC" name="flash_config/flash_config.c"/>
        <file category="header" name="flash_config/flash_config.h"/>
      </files>
    </component>
  </components>
</package>
